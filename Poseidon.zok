from ".\Poseidon.Parameters.zok" import LENGTH, ROUNDS, MATRIX, CONSTANTS

const u32 SIZE = LENGTH + 1
type MESSAGE = field[LENGTH]
type STATE = field[SIZE]

def Initialize(MESSAGE message) -> STATE:
	return [0, ...message]
	
def Add(STATE state, u32 round) -> STATE:
	u32 offset = round * SIZE
	for u32 i in 0..SIZE do
		state[i] = state[i] + CONSTANTS[offset + i]
	endfor
	return state

def Substitute(STATE state, bool partial) -> STATE:
	state[0] = state[0]**5
	for u32 i in 1..SIZE do
		state[i] = partial ? state[i] : state[i]**5
	endfor
	return state
	
def Mix(STATE state) -> STATE:
	STATE new = [0; SIZE]
	for u32 i in 0..SIZE do
		for u32 k in 0..SIZE do
			new[i] = new[i] + state[k] * MATRIX[i][k]
		endfor	
	endfor
	return new
	
def Poseidon(MESSAGE message) -> field:
	STATE state = Initialize(message)
	for u32 i in 0..ROUNDS do
		state = Add(state, i)
		state = Substitute(state, (i > 3) && (i + 4 < ROUNDS))
		state = Mix(state)
	endfor
	return state[1]
	

	
